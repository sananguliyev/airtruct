syntax = "proto3";

import "common.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "validate/validate.proto";

package protorender;

option go_package = "github.com/sananguliyev/airtruct/internal/protogen";


message RegisterWorkerRequest {
  string id = 1;
  int32 port = 2;
}

message DeregisterWorkerRequest {
  string id = 1;
}

message WorkerStreamStatusRequest {
  int64 worker_stream_id = 1;
  WorkerStreamStatus status = 2;
}

message ListComponentConfigsResponse {
  repeated ComponentConfig data = 1;
}

message GetComponentConfigRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

message ComponentConfigResponse {
  ComponentConfig data = 1;
  CommonResponse meta = 2;
}

message ListWorkersRequest {
  string status = 1 [
    (validate.rules).string = {
      in: ["active", "inactive", "all"]
    }
  ];
}

message ListWorkersResponse {
  message Worker {
    string id = 1;
    string address = 2;
    string status = 3;
    google.protobuf.Timestamp last_heartbeat = 4 [ json_name = "last_heartbeat" ];
  }
  repeated Worker data = 1;
}

message ListStreamsRequest {
  string status = 1 [
    (validate.rules).string = {
      in: ["active", "completed", "paused", "failed", "all"]
    }
  ];
}

message ListStreamsResponse {
  repeated Stream data = 1;
}

message GetStreamRequest {
  int64 id = 1 [(validate.rules).int64.gt = 0];
}

message StreamResponse {
  Stream data = 1;
  CommonResponse meta = 2;
}

message Event {
  int64 worker_stream_id = 1;
  string section = 2;
  string component_name = 3;
  string type = 4 [
    (validate.rules).string = {
      in: ["PRODUCE", "CONSUME", "DELETE", "ERROR", "UNKNOWN"]
    }
  ];
  string content = 5;
  google.protobuf.Struct meta = 6;
}

message MetricsRequest {
  int64 worker_stream_id = 1 [(validate.rules).int64.gt = 0];
  uint64 input_events = 2;
  uint64 processor_errors = 3;
  uint64 output_events = 4;
}

service Coordinator {
  // Worker stream methods
  rpc UpdateWorkerStreamStatus(WorkerStreamStatusRequest) returns (CommonResponse) {}

  // Component config methods
  rpc CreateComponentConfig(ComponentConfig) returns (ComponentConfigResponse) {
    option (google.api.http) = {
      post: "/v0/component-configs",
      body: "*"
    };
  }
  rpc UpdateComponentConfig(ComponentConfig) returns (ComponentConfigResponse) {
    option (google.api.http) = {
      put: "/v0/component-configs/{id}",
      body: "*"
    };
  }
  rpc GetComponentConfig(GetComponentConfigRequest) returns (ComponentConfigResponse) {
    option (google.api.http) = {
      get: "/v0/component-configs/{id}",
    };
  }
  rpc ListComponentConfigs(google.protobuf.Empty) returns (ListComponentConfigsResponse) {
    option (google.api.http) = {
      get: "/v0/component-configs",
    };
  }

  // Worker methods
  rpc RegisterWorker(RegisterWorkerRequest) returns (CommonResponse) {}
  rpc DeregisterWorker(DeregisterWorkerRequest) returns (CommonResponse) {}
  rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse) {
    option (google.api.http) = {
      get: "/v0/workers/{status}",
    };
  }

  // Stream methods
  rpc ListStreams(ListStreamsRequest) returns (ListStreamsResponse) {
    option (google.api.http) = {
      get: "/v0/streams",
    };
  }
  rpc GetStream(GetStreamRequest) returns (StreamResponse) {
    option (google.api.http) = {
      get: "/v0/streams/{id}",
    };
  }
  rpc CreateStream(Stream) returns (StreamResponse) {
    option (google.api.http) = {
      post: "/v0/streams",
      body: "*"
    };
  }
  rpc UpdateStream(Stream) returns (StreamResponse) {
    option (google.api.http) = {
      put: "/v0/streams/{id}",
      body: "*"
    };
  }

  // Observability methods
  rpc IngestEvents(stream Event) returns (stream google.protobuf.Empty);
  rpc IngestMetrics(MetricsRequest) returns (google.protobuf.Empty) {}
}
