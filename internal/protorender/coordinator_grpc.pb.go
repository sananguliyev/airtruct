// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protorender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
	DeregisterWorker(ctx context.Context, in *DeregisterWorkerRequest, opts ...grpc.CallOption) (*DeregisterWorkerResponse, error)
	UpdateWorkerStreamStatus(ctx context.Context, in *WorkerStreamStatusRequest, opts ...grpc.CallOption) (*WorkerStreamStatusResponse, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, "/protorender.Coordinator/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) DeregisterWorker(ctx context.Context, in *DeregisterWorkerRequest, opts ...grpc.CallOption) (*DeregisterWorkerResponse, error) {
	out := new(DeregisterWorkerResponse)
	err := c.cc.Invoke(ctx, "/protorender.Coordinator/DeregisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UpdateWorkerStreamStatus(ctx context.Context, in *WorkerStreamStatusRequest, opts ...grpc.CallOption) (*WorkerStreamStatusResponse, error) {
	out := new(WorkerStreamStatusResponse)
	err := c.cc.Invoke(ctx, "/protorender.Coordinator/UpdateWorkerStreamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility
type CoordinatorServer interface {
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	DeregisterWorker(context.Context, *DeregisterWorkerRequest) (*DeregisterWorkerResponse, error)
	UpdateWorkerStreamStatus(context.Context, *WorkerStreamStatusRequest) (*WorkerStreamStatusResponse, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (*UnimplementedCoordinatorServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (*UnimplementedCoordinatorServer) DeregisterWorker(context.Context, *DeregisterWorkerRequest) (*DeregisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterWorker not implemented")
}
func (*UnimplementedCoordinatorServer) UpdateWorkerStreamStatus(context.Context, *WorkerStreamStatusRequest) (*WorkerStreamStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerStreamStatus not implemented")
}
func (*UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}

func RegisterCoordinatorServer(s *grpc.Server, srv CoordinatorServer) {
	s.RegisterService(&_Coordinator_serviceDesc, srv)
}

func _Coordinator_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Coordinator/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_DeregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).DeregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Coordinator/DeregisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).DeregisterWorker(ctx, req.(*DeregisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UpdateWorkerStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateWorkerStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Coordinator/UpdateWorkerStreamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateWorkerStreamStatus(ctx, req.(*WorkerStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protorender.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _Coordinator_RegisterWorker_Handler,
		},
		{
			MethodName: "DeregisterWorker",
			Handler:    _Coordinator_DeregisterWorker_Handler,
		},
		{
			MethodName: "UpdateWorkerStreamStatus",
			Handler:    _Coordinator_UpdateWorkerStreamStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
