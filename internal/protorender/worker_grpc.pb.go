// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protorender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	AssignStream(ctx context.Context, in *AssignStreamRequest, opts ...grpc.CallOption) (*AssignStreamResponse, error)
	FetchStream(ctx context.Context, in *FetchStreamRequest, opts ...grpc.CallOption) (*FetchStreamResponse, error)
	CompleteStream(ctx context.Context, in *CompleteStreamRequest, opts ...grpc.CallOption) (*CompleteStreamResponse, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/protorender.Worker/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) AssignStream(ctx context.Context, in *AssignStreamRequest, opts ...grpc.CallOption) (*AssignStreamResponse, error) {
	out := new(AssignStreamResponse)
	err := c.cc.Invoke(ctx, "/protorender.Worker/AssignStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) FetchStream(ctx context.Context, in *FetchStreamRequest, opts ...grpc.CallOption) (*FetchStreamResponse, error) {
	out := new(FetchStreamResponse)
	err := c.cc.Invoke(ctx, "/protorender.Worker/FetchStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) CompleteStream(ctx context.Context, in *CompleteStreamRequest, opts ...grpc.CallOption) (*CompleteStreamResponse, error) {
	out := new(CompleteStreamResponse)
	err := c.cc.Invoke(ctx, "/protorender.Worker/CompleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error)
	AssignStream(context.Context, *AssignStreamRequest) (*AssignStreamResponse, error)
	FetchStream(context.Context, *FetchStreamRequest) (*FetchStreamResponse, error)
	CompleteStream(context.Context, *CompleteStreamRequest) (*CompleteStreamResponse, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedWorkerServer) AssignStream(context.Context, *AssignStreamRequest) (*AssignStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignStream not implemented")
}
func (*UnimplementedWorkerServer) FetchStream(context.Context, *FetchStreamRequest) (*FetchStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchStream not implemented")
}
func (*UnimplementedWorkerServer) CompleteStream(context.Context, *CompleteStreamRequest) (*CompleteStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteStream not implemented")
}
func (*UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Worker/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_AssignStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).AssignStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Worker/AssignStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).AssignStream(ctx, req.(*AssignStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_FetchStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).FetchStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Worker/FetchStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).FetchStream(ctx, req.(*FetchStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_CompleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).CompleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protorender.Worker/CompleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).CompleteStream(ctx, req.(*CompleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protorender.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Worker_HealthCheck_Handler,
		},
		{
			MethodName: "AssignStream",
			Handler:    _Worker_AssignStream_Handler,
		},
		{
			MethodName: "FetchStream",
			Handler:    _Worker_FetchStream_Handler,
		},
		{
			MethodName: "CompleteStream",
			Handler:    _Worker_CompleteStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker.proto",
}
