// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common.proto

package protogen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonResponseMultiError,
// or nil if none found.
func (m *CommonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonResponseMultiError(errors)
	}

	return nil
}

// CommonResponseMultiError is an error wrapping multiple validation errors
// returned by CommonResponse.ValidateAll() if the designated constraints
// aren't met.
type CommonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonResponseMultiError) AllErrors() []error { return m }

// CommonResponseValidationError is the validation error returned by
// CommonResponse.Validate if the designated constraints aren't met.
type CommonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonResponseValidationError) ErrorName() string { return "CommonResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonResponseValidationError{}

// Validate checks the field values on Stream with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stream with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StreamMultiError, or nil if none found.
func (m *Stream) ValidateAll() error {
	return m.validate(true)
}

func (m *Stream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := StreamValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InputConfig

	if l := utf8.RuneCountInString(m.GetInputLabel()); l < 1 || l > 100 {
		err := StreamValidationError{
			field:  "InputLabel",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Stream_InputLabel_Pattern.MatchString(m.GetInputLabel()) {
		err := StreamValidationError{
			field:  "InputLabel",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9 _-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InputComponent

	// no validation rules for OutputConfig

	if l := utf8.RuneCountInString(m.GetOutputLabel()); l < 1 || l > 100 {
		err := StreamValidationError{
			field:  "OutputLabel",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Stream_OutputLabel_Pattern.MatchString(m.GetOutputLabel()) {
		err := StreamValidationError{
			field:  "OutputLabel",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9 _-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OutputComponent

	// no validation rules for IsCurrent

	if _, ok := _Stream_Status_InLookup[m.GetStatus()]; !ok {
		err := StreamValidationError{
			field:  "Status",
			reason: "value must be in list [active completed paused failed]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProcessors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamValidationError{
						field:  fmt.Sprintf("Processors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamValidationError{
						field:  fmt.Sprintf("Processors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamValidationError{
					field:  fmt.Sprintf("Processors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsHttpServer

	if m.ParentId != nil {
		// no validation rules for ParentId
	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamMultiError(errors)
	}

	return nil
}

// StreamMultiError is an error wrapping multiple validation errors returned by
// Stream.ValidateAll() if the designated constraints aren't met.
type StreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMultiError) AllErrors() []error { return m }

// StreamValidationError is the validation error returned by Stream.Validate if
// the designated constraints aren't met.
type StreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamValidationError) ErrorName() string { return "StreamValidationError" }

// Error satisfies the builtin error interface
func (e StreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamValidationError{}

var _Stream_InputLabel_Pattern = regexp.MustCompile("^[a-zA-Z0-9 _-]+$")

var _Stream_OutputLabel_Pattern = regexp.MustCompile("^[a-zA-Z0-9 _-]+$")

var _Stream_Status_InLookup = map[string]struct{}{
	"active":    {},
	"completed": {},
	"paused":    {},
	"failed":    {},
}

// Validate checks the field values on Stream_Processor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Stream_Processor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stream_Processor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Stream_ProcessorMultiError, or nil if none found.
func (m *Stream_Processor) ValidateAll() error {
	return m.validate(true)
}

func (m *Stream_Processor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetLabel()); l < 1 || l > 100 {
		err := Stream_ProcessorValidationError{
			field:  "Label",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Stream_Processor_Label_Pattern.MatchString(m.GetLabel()) {
		err := Stream_ProcessorValidationError{
			field:  "Label",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9 _-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Component

	// no validation rules for Config

	if len(errors) > 0 {
		return Stream_ProcessorMultiError(errors)
	}

	return nil
}

// Stream_ProcessorMultiError is an error wrapping multiple validation errors
// returned by Stream_Processor.ValidateAll() if the designated constraints
// aren't met.
type Stream_ProcessorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stream_ProcessorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stream_ProcessorMultiError) AllErrors() []error { return m }

// Stream_ProcessorValidationError is the validation error returned by
// Stream_Processor.Validate if the designated constraints aren't met.
type Stream_ProcessorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stream_ProcessorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stream_ProcessorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stream_ProcessorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stream_ProcessorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stream_ProcessorValidationError) ErrorName() string { return "Stream_ProcessorValidationError" }

// Error satisfies the builtin error interface
func (e Stream_ProcessorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStream_Processor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stream_ProcessorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stream_ProcessorValidationError{}

var _Stream_Processor_Label_Pattern = regexp.MustCompile("^[a-zA-Z0-9 _-]+$")
