// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coordinator.proto

package protogen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterWorkerRequestMultiError, or nil if none found.
func (m *RegisterWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Port

	if len(errors) > 0 {
		return RegisterWorkerRequestMultiError(errors)
	}

	return nil
}

// RegisterWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterWorkerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterWorkerRequestMultiError) AllErrors() []error { return m }

// RegisterWorkerRequestValidationError is the validation error returned by
// RegisterWorkerRequest.Validate if the designated constraints aren't met.
type RegisterWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterWorkerRequestValidationError) ErrorName() string {
	return "RegisterWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterWorkerRequestValidationError{}

// Validate checks the field values on DeregisterWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeregisterWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterWorkerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeregisterWorkerRequestMultiError, or nil if none found.
func (m *DeregisterWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeregisterWorkerRequestMultiError(errors)
	}

	return nil
}

// DeregisterWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by DeregisterWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeregisterWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterWorkerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterWorkerRequestMultiError) AllErrors() []error { return m }

// DeregisterWorkerRequestValidationError is the validation error returned by
// DeregisterWorkerRequest.Validate if the designated constraints aren't met.
type DeregisterWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterWorkerRequestValidationError) ErrorName() string {
	return "DeregisterWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterWorkerRequestValidationError{}

// Validate checks the field values on WorkerStreamStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkerStreamStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkerStreamStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkerStreamStatusRequestMultiError, or nil if none found.
func (m *WorkerStreamStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkerStreamStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerStreamId

	// no validation rules for Status

	if len(errors) > 0 {
		return WorkerStreamStatusRequestMultiError(errors)
	}

	return nil
}

// WorkerStreamStatusRequestMultiError is an error wrapping multiple validation
// errors returned by WorkerStreamStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type WorkerStreamStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerStreamStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerStreamStatusRequestMultiError) AllErrors() []error { return m }

// WorkerStreamStatusRequestValidationError is the validation error returned by
// WorkerStreamStatusRequest.Validate if the designated constraints aren't met.
type WorkerStreamStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerStreamStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerStreamStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerStreamStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerStreamStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerStreamStatusRequestValidationError) ErrorName() string {
	return "WorkerStreamStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkerStreamStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkerStreamStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerStreamStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerStreamStatusRequestValidationError{}

// Validate checks the field values on ListComponentConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComponentConfigsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComponentConfigsResponseMultiError, or nil if none found.
func (m *ListComponentConfigsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentConfigsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListComponentConfigsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListComponentConfigsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComponentConfigsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListComponentConfigsResponseMultiError(errors)
	}

	return nil
}

// ListComponentConfigsResponseMultiError is an error wrapping multiple
// validation errors returned by ListComponentConfigsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListComponentConfigsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentConfigsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentConfigsResponseMultiError) AllErrors() []error { return m }

// ListComponentConfigsResponseValidationError is the validation error returned
// by ListComponentConfigsResponse.Validate if the designated constraints
// aren't met.
type ListComponentConfigsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentConfigsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentConfigsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentConfigsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentConfigsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentConfigsResponseValidationError) ErrorName() string {
	return "ListComponentConfigsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentConfigsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentConfigsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentConfigsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentConfigsResponseValidationError{}

// Validate checks the field values on GetComponentConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentConfigRequestMultiError, or nil if none found.
func (m *GetComponentConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetComponentConfigRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetComponentConfigRequestMultiError(errors)
	}

	return nil
}

// GetComponentConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetComponentConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type GetComponentConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentConfigRequestMultiError) AllErrors() []error { return m }

// GetComponentConfigRequestValidationError is the validation error returned by
// GetComponentConfigRequest.Validate if the designated constraints aren't met.
type GetComponentConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentConfigRequestValidationError) ErrorName() string {
	return "GetComponentConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentConfigRequestValidationError{}

// Validate checks the field values on ListWorkersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkersRequestMultiError, or nil if none found.
func (m *ListWorkersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListWorkersRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := ListWorkersRequestValidationError{
			field:  "Status",
			reason: "value must be in list [active inactive all]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWorkersRequestMultiError(errors)
	}

	return nil
}

// ListWorkersRequestMultiError is an error wrapping multiple validation errors
// returned by ListWorkersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWorkersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkersRequestMultiError) AllErrors() []error { return m }

// ListWorkersRequestValidationError is the validation error returned by
// ListWorkersRequest.Validate if the designated constraints aren't met.
type ListWorkersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkersRequestValidationError) ErrorName() string {
	return "ListWorkersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkersRequestValidationError{}

var _ListWorkersRequest_Status_InLookup = map[string]struct{}{
	"active":   {},
	"inactive": {},
	"all":      {},
}

// Validate checks the field values on ListWorkersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkersResponseMultiError, or nil if none found.
func (m *ListWorkersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkersResponseMultiError(errors)
	}

	return nil
}

// ListWorkersResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkersResponseMultiError) AllErrors() []error { return m }

// ListWorkersResponseValidationError is the validation error returned by
// ListWorkersResponse.Validate if the designated constraints aren't met.
type ListWorkersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkersResponseValidationError) ErrorName() string {
	return "ListWorkersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkersResponseValidationError{}

// Validate checks the field values on ListStreamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStreamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStreamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStreamsRequestMultiError, or nil if none found.
func (m *ListStreamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStreamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ListStreamsRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := ListStreamsRequestValidationError{
			field:  "Status",
			reason: "value must be in list [active completed paused failed all]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStreamsRequestMultiError(errors)
	}

	return nil
}

// ListStreamsRequestMultiError is an error wrapping multiple validation errors
// returned by ListStreamsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStreamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStreamsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStreamsRequestMultiError) AllErrors() []error { return m }

// ListStreamsRequestValidationError is the validation error returned by
// ListStreamsRequest.Validate if the designated constraints aren't met.
type ListStreamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStreamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStreamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStreamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStreamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStreamsRequestValidationError) ErrorName() string {
	return "ListStreamsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStreamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStreamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStreamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStreamsRequestValidationError{}

var _ListStreamsRequest_Status_InLookup = map[string]struct{}{
	"active":    {},
	"completed": {},
	"paused":    {},
	"failed":    {},
	"all":       {},
}

// Validate checks the field values on ListStreamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStreamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStreamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStreamsResponseMultiError, or nil if none found.
func (m *ListStreamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStreamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStreamsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStreamsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStreamsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStreamsResponseMultiError(errors)
	}

	return nil
}

// ListStreamsResponseMultiError is an error wrapping multiple validation
// errors returned by ListStreamsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStreamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStreamsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStreamsResponseMultiError) AllErrors() []error { return m }

// ListStreamsResponseValidationError is the validation error returned by
// ListStreamsResponse.Validate if the designated constraints aren't met.
type ListStreamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStreamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStreamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStreamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStreamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStreamsResponseValidationError) ErrorName() string {
	return "ListStreamsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStreamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStreamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStreamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStreamsResponseValidationError{}

// Validate checks the field values on GetStreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStreamRequestMultiError, or nil if none found.
func (m *GetStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetStreamRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStreamRequestMultiError(errors)
	}

	return nil
}

// GetStreamRequestMultiError is an error wrapping multiple validation errors
// returned by GetStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStreamRequestMultiError) AllErrors() []error { return m }

// GetStreamRequestValidationError is the validation error returned by
// GetStreamRequest.Validate if the designated constraints aren't met.
type GetStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamRequestValidationError) ErrorName() string { return "GetStreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamRequestValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerStreamId

	// no validation rules for Section

	// no validation rules for ComponentName

	if _, ok := _Event_Type_InLookup[m.GetType()]; !ok {
		err := EventValidationError{
			field:  "Type",
			reason: "value must be in list [PRODUCE CONSUME DELETE ERROR UNKNOWN]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

var _Event_Type_InLookup = map[string]struct{}{
	"PRODUCE": {},
	"CONSUME": {},
	"DELETE":  {},
	"ERROR":   {},
	"UNKNOWN": {},
}

// Validate checks the field values on ListWorkersResponse_Worker with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkersResponse_Worker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkersResponse_Worker with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkersResponse_WorkerMultiError, or nil if none found.
func (m *ListWorkersResponse_Worker) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkersResponse_Worker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetLastHeartbeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWorkersResponse_WorkerValidationError{
					field:  "LastHeartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWorkersResponse_WorkerValidationError{
					field:  "LastHeartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWorkersResponse_WorkerValidationError{
				field:  "LastHeartbeat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWorkersResponse_WorkerMultiError(errors)
	}

	return nil
}

// ListWorkersResponse_WorkerMultiError is an error wrapping multiple
// validation errors returned by ListWorkersResponse_Worker.ValidateAll() if
// the designated constraints aren't met.
type ListWorkersResponse_WorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkersResponse_WorkerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkersResponse_WorkerMultiError) AllErrors() []error { return m }

// ListWorkersResponse_WorkerValidationError is the validation error returned
// by ListWorkersResponse_Worker.Validate if the designated constraints aren't met.
type ListWorkersResponse_WorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkersResponse_WorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkersResponse_WorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkersResponse_WorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkersResponse_WorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkersResponse_WorkerValidationError) ErrorName() string {
	return "ListWorkersResponse_WorkerValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkersResponse_WorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkersResponse_Worker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkersResponse_WorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkersResponse_WorkerValidationError{}
