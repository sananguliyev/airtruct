// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: coordinator.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coordinator_UpdateWorkerStreamStatus_FullMethodName = "/protorender.Coordinator/UpdateWorkerStreamStatus"
	Coordinator_CreateComponentConfig_FullMethodName    = "/protorender.Coordinator/CreateComponentConfig"
	Coordinator_UpdateComponentConfig_FullMethodName    = "/protorender.Coordinator/UpdateComponentConfig"
	Coordinator_GetComponentConfig_FullMethodName       = "/protorender.Coordinator/GetComponentConfig"
	Coordinator_ListComponentConfigs_FullMethodName     = "/protorender.Coordinator/ListComponentConfigs"
	Coordinator_RegisterWorker_FullMethodName           = "/protorender.Coordinator/RegisterWorker"
	Coordinator_DeregisterWorker_FullMethodName         = "/protorender.Coordinator/DeregisterWorker"
	Coordinator_ListWorkers_FullMethodName              = "/protorender.Coordinator/ListWorkers"
	Coordinator_ListStreams_FullMethodName              = "/protorender.Coordinator/ListStreams"
	Coordinator_GetStream_FullMethodName                = "/protorender.Coordinator/GetStream"
	Coordinator_CreateStream_FullMethodName             = "/protorender.Coordinator/CreateStream"
	Coordinator_UpdateStream_FullMethodName             = "/protorender.Coordinator/UpdateStream"
)

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	// Worker stream methods
	UpdateWorkerStreamStatus(ctx context.Context, in *WorkerStreamStatusRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// Component config methods
	CreateComponentConfig(ctx context.Context, in *ComponentConfig, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateComponentConfig(ctx context.Context, in *ComponentConfig, opts ...grpc.CallOption) (*CommonResponse, error)
	GetComponentConfig(ctx context.Context, in *GetComponentConfigRequest, opts ...grpc.CallOption) (*ComponentConfig, error)
	ListComponentConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListComponentConfigsResponse, error)
	// Worker methods
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeregisterWorker(ctx context.Context, in *DeregisterWorkerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	// Stream methods
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*Stream, error)
	CreateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*CommonResponse, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) UpdateWorkerStreamStatus(ctx context.Context, in *WorkerStreamStatusRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_UpdateWorkerStreamStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CreateComponentConfig(ctx context.Context, in *ComponentConfig, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_CreateComponentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UpdateComponentConfig(ctx context.Context, in *ComponentConfig, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_UpdateComponentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetComponentConfig(ctx context.Context, in *GetComponentConfigRequest, opts ...grpc.CallOption) (*ComponentConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentConfig)
	err := c.cc.Invoke(ctx, Coordinator_GetComponentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ListComponentConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListComponentConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComponentConfigsResponse)
	err := c.cc.Invoke(ctx, Coordinator_ListComponentConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) DeregisterWorker(ctx context.Context, in *DeregisterWorkerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_DeregisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, Coordinator_ListWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, Coordinator_ListStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*Stream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stream)
	err := c.cc.Invoke(ctx, Coordinator_GetStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) CreateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) UpdateStream(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Coordinator_UpdateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility.
type CoordinatorServer interface {
	// Worker stream methods
	UpdateWorkerStreamStatus(context.Context, *WorkerStreamStatusRequest) (*CommonResponse, error)
	// Component config methods
	CreateComponentConfig(context.Context, *ComponentConfig) (*CommonResponse, error)
	UpdateComponentConfig(context.Context, *ComponentConfig) (*CommonResponse, error)
	GetComponentConfig(context.Context, *GetComponentConfigRequest) (*ComponentConfig, error)
	ListComponentConfigs(context.Context, *emptypb.Empty) (*ListComponentConfigsResponse, error)
	// Worker methods
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*CommonResponse, error)
	DeregisterWorker(context.Context, *DeregisterWorkerRequest) (*CommonResponse, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	// Stream methods
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	GetStream(context.Context, *GetStreamRequest) (*Stream, error)
	CreateStream(context.Context, *Stream) (*CommonResponse, error)
	UpdateStream(context.Context, *Stream) (*CommonResponse, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatorServer struct{}

func (UnimplementedCoordinatorServer) UpdateWorkerStreamStatus(context.Context, *WorkerStreamStatusRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerStreamStatus not implemented")
}
func (UnimplementedCoordinatorServer) CreateComponentConfig(context.Context, *ComponentConfig) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponentConfig not implemented")
}
func (UnimplementedCoordinatorServer) UpdateComponentConfig(context.Context, *ComponentConfig) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComponentConfig not implemented")
}
func (UnimplementedCoordinatorServer) GetComponentConfig(context.Context, *GetComponentConfigRequest) (*ComponentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentConfig not implemented")
}
func (UnimplementedCoordinatorServer) ListComponentConfigs(context.Context, *emptypb.Empty) (*ListComponentConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentConfigs not implemented")
}
func (UnimplementedCoordinatorServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedCoordinatorServer) DeregisterWorker(context.Context, *DeregisterWorkerRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterWorker not implemented")
}
func (UnimplementedCoordinatorServer) ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedCoordinatorServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedCoordinatorServer) GetStream(context.Context, *GetStreamRequest) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedCoordinatorServer) CreateStream(context.Context, *Stream) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedCoordinatorServer) UpdateStream(context.Context, *Stream) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}
func (UnimplementedCoordinatorServer) testEmbeddedByValue()                     {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_UpdateWorkerStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateWorkerStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_UpdateWorkerStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateWorkerStreamStatus(ctx, req.(*WorkerStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CreateComponentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateComponentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CreateComponentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateComponentConfig(ctx, req.(*ComponentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UpdateComponentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateComponentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_UpdateComponentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateComponentConfig(ctx, req.(*ComponentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetComponentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetComponentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_GetComponentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetComponentConfig(ctx, req.(*GetComponentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ListComponentConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ListComponentConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_ListComponentConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ListComponentConfigs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_DeregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).DeregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_DeregisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).DeregisterWorker(ctx, req.(*DeregisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).CreateStream(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_UpdateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).UpdateStream(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protorender.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateWorkerStreamStatus",
			Handler:    _Coordinator_UpdateWorkerStreamStatus_Handler,
		},
		{
			MethodName: "CreateComponentConfig",
			Handler:    _Coordinator_CreateComponentConfig_Handler,
		},
		{
			MethodName: "UpdateComponentConfig",
			Handler:    _Coordinator_UpdateComponentConfig_Handler,
		},
		{
			MethodName: "GetComponentConfig",
			Handler:    _Coordinator_GetComponentConfig_Handler,
		},
		{
			MethodName: "ListComponentConfigs",
			Handler:    _Coordinator_ListComponentConfigs_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Coordinator_RegisterWorker_Handler,
		},
		{
			MethodName: "DeregisterWorker",
			Handler:    _Coordinator_DeregisterWorker_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _Coordinator_ListWorkers_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _Coordinator_ListStreams_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _Coordinator_GetStream_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _Coordinator_CreateStream_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _Coordinator_UpdateStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
