name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - build_group: "linux-amd64"
            runner: ubuntu-latest
          - build_group: "linux-arm64"
            runner: ubuntu-latest
          - build_group: "linux-arm"
            runner: ubuntu-latest
          - build_group: "darwin-amd64"
            runner: macos-latest
          - build_group: "darwin-arm64"
            runner: macos-latest
          - build_group: "windows-amd64"
            runner: windows-latest
          - build_group: "windows-arm64"
            runner: windows-latest
    steps:
    - name: Check Out Repo
      uses: actions/checkout@v4

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x
        check-latest: true

    - name: Setup MSYS2 (Windows only)
      if: matrix.runner == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-zeromq
          mingw-w64-x86_64-pkg-config

    - name: Install platform dependencies (Linux)
      if: matrix.runner == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev
        if [ "${{ matrix.build_group }}" = "linux-arm" ]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf
        elif [ "${{ matrix.build_group }}" = "linux-arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Install platform dependencies (macOS)
      if: matrix.runner == 'macos-latest'
      shell: bash
      run: |
        brew install zeromq

    - name: Set build environment
      shell: bash
      run: |
        case "${{ matrix.build_group }}" in
          "linux-amd64")
            echo "GOOS=linux" >> $GITHUB_ENV
            echo "GOARCH=amd64" >> $GITHUB_ENV
            ;;
          "linux-arm64")
            echo "GOOS=linux" >> $GITHUB_ENV
            echo "GOARCH=arm64" >> $GITHUB_ENV
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            ;;
          "linux-arm")
            echo "GOOS=linux" >> $GITHUB_ENV
            echo "GOARCH=arm" >> $GITHUB_ENV
            echo "GOARM=7" >> $GITHUB_ENV
            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            ;;
          "darwin-amd64")
            echo "GOOS=darwin" >> $GITHUB_ENV
            echo "GOARCH=amd64" >> $GITHUB_ENV
            ;;
          "darwin-arm64")
            echo "GOOS=darwin" >> $GITHUB_ENV
            echo "GOARCH=arm64" >> $GITHUB_ENV
            ;;
          "windows-amd64")
            echo "GOOS=windows" >> $GITHUB_ENV
            echo "GOARCH=amd64" >> $GITHUB_ENV
            ;;
          "windows-arm64")
            echo "GOOS=windows" >> $GITHUB_ENV
            echo "GOARCH=arm64" >> $GITHUB_ENV
            ;;
        esac

    - name: Build binary (Windows)
      if: matrix.runner == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "dist"
        $env:CGO_ENABLED = "1"
        $env:PATH = "C:\msys64\mingw64\bin;C:\msys64\usr\bin;" + $env:PATH
        
        go build `
          -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.DateBuilt=$((Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ'))" `
          -o "dist\airtruct.exe" `
          .\cmd\airtruct

    - name: Build binary (Unix)
      if: matrix.runner != 'windows-latest'
      shell: bash
      run: |
        mkdir -p dist
        BINARY_NAME="airtruct"
        
        CGO_ENABLED=1 go build \
          -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.DateBuilt=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/airtruct

    - name: Create archive (Windows)
      if: matrix.runner == 'windows-latest'
      shell: pwsh
      run: |
        Set-Location dist
        $ARCHIVE_NAME = "airtruct_${{ github.ref_name }}_$env:GOOS_$env:GOARCH"
        
        # Copy README and LICENSE to current directory
        Copy-Item ..\README.md .
        Copy-Item ..\LICENSE .
        
        # Create zip archive
        Compress-Archive -Path airtruct.exe, README.md, LICENSE -DestinationPath "$ARCHIVE_NAME.zip"
        
        # Clean up copied files
        Remove-Item README.md, LICENSE

    - name: Create archive (Unix)
      if: matrix.runner != 'windows-latest'
      shell: bash
      run: |
        cd dist
        ARCHIVE_NAME="airtruct_${{ github.ref_name }}_${GOOS}_${GOARCH}"
        if [ -n "$GOARM" ]; then
          ARCHIVE_NAME="${ARCHIVE_NAME}v${GOARM}"
        fi
        
        # Copy README and LICENSE to current directory
        cp ../README.md ../LICENSE ./
        
        tar -czf "${ARCHIVE_NAME}.tar.gz" airtruct README.md LICENSE
        
        # Clean up copied files
        rm -f README.md LICENSE

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: airtruct-${{ matrix.build_group }}
        path: |
          dist/*.tar.gz
          dist/*.zip
        retention-days: 1

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Check Out Repo
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts/ -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
        echo "Found artifacts:"
        ls -la release-assets/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:

    - name: Check Out Repo
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/airtruct
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: ./
        file: Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max